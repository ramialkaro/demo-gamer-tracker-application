module.exports=function(serverDirectory){
	var http=require("http");
	var fs=require("fs");
	
	return {
		getFile(file,callback){
			http.get(serverDirectory+file,function(resp){
				var mime=resp.headers['content-type'];
				if (!mime) mime="text";
				var enc=mime.startsWith("image") ? "binary" : "utf8";
				var data="";
				resp.setEncoding(enc);
				resp.on("data", (chunk) => data+=chunk);
				resp.on("end",() => callback(data,enc,resp.statusCode==200 ? false : "Error downloading"));
			});
		},
		
		getJSON(file,callback){
			this.getFile(file+".json",function(data,enc,err){
				if (err){
					callback({},err);
					return;
				}
				var obj={},err;
				try{
					obj=JSON.parse(data);
				}
				catch(er){
					err=file+": Error parsing json";
				}
				callback(obj);
			});
		},

		downloadTemplate(dir,src,target,cb){
			if (!target) target=src;
			var self=this;
			fs.stat(dir+'/'+target,function(err,stat){
				if (err)
					self.getFile(dir+"/"+src,function(data,enc,err){
						fs.writeFile(dir+"/"+target,data,enc,function(err){
							if (err) console.error("Error with: ",dir,target);
							else console.log("Wrote: ",dir,target);
							if (cb) cb();
						})
					});
				else console.log(target+" already exists");
			});
		},
		
		downloadArray(dir,files){
			var self=this;
			fs.mkdir(dir,function(err){
				if (Array.isArray(files)){
					for(var f in files){
						var fn=files[f];
						if (typeof(fn)=='object'){
							for (var k in fn) self.downloadTemplate(dir,k,fn[k]);
						}
						else self.downloadTemplate(dir,fn);
					}
				}
				else{
					for(var subdir in files){
						self.downloadArray(dir+"/"+subdir,files[subdir]);
					}
				}
			});
		}

	}
}